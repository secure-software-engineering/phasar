name: Phasar CI

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        compiler: [ [clang++-15, clang-15] ]
        build: [ Debug, Release, DebugLibdeps ]
        include:
          - build: Debug
            cmake_build_type: Debug
            flags: -DPHASAR_ENABLE_SANITIZERS=ON
          - build: Release
            cmake_build_type: Release
            flags: -DPHASAR_ENABLE_DYNAMIC_LOG=OFF -DPHASAR_BUILD_DYNLIB=ON -DPHASAR_ENABLE_SANITIZERS=ON
          - build: DebugLibdeps
            cmake_build_type: Debug
            flags: -DPHASAR_DEBUG_LIBDEPS=ON -DBUILD_SHARED_LIBS=ON

    continue-on-error: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install Phasar Dependencies
        shell: bash
        run: |
          ./utils/InstallAptDependencies.sh
          sudo apt-get -y install --no-install-recommends libboost-graph-dev

      - name: Install Strategy Dependencies
        shell: bash
        run: |
          sudo apt-key adv --fetch-keys https://apt.llvm.org/llvm-snapshot.gpg.key && \
          sudo add-apt-repository -y 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main' && \
          sudo apt-get update && \
          sudo apt-get -y install --no-install-recommends \
              clang-15 \
              llvm-15-dev \
              libllvm15 \
              libclang-common-15-dev \
              libclang-15-dev \
              libclang-cpp15-dev \
              clang-tidy-15 \
              libclang-rt-15-dev

      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: "5.8.1"
      - name: Building Phasar in ${{ matrix.build }} with ${{ matrix.compiler[0] }}
        env:
          CXX: ${{ matrix.compiler[0] }}
          CC: ${{ matrix.compiler[1] }}
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            -DBUILD_SWIFT_TESTS=ON \
            -DPHASAR_USE_Z3=ON \
            ${{ matrix.flags }} \
            -G Ninja
          cmake --build .

      - name: Run Unittests
        shell: bash
        run: |
          cd build
          cmake --build . --target check-phasar-unittests
