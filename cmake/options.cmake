if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build mode ('DebugSan' or 'Debug' or 'Release', default is 'Debug')" FORCE)
endif ()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -MP -fvisibility-inlines-hidden -fstack-protector-strong -ffunction-sections -fdata-sections -pipe")
if(CMAKE_BUILD_TYPE STREQUAL "DebugSan")
    message(STATUS "Selected Debug Build with sanitizers")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fno-omit-frame-pointer -fsanitize=address,undefined")
    set(CMAKE_BUILD_TYPE "Debug")
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
    message(STATUS "Selected Debug Build")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
else()
    set(CMAKE_BUILD_TYPE "Release")
    message(STATUS "Selected Release Build")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
endif()




# default option always preset
option(BUILD_SHARED_LIBS "Build shared libraries (default is OFF)" OFF)
if(BUILD_SHARED_LIBS)
  set(CONANFILE "${PROJECT_SOURCE_DIR}/conanfile.shared.txt")
endif()



option(PHASAR_BUILD_DYNLIB "Build one fat shared library. Requires BUILD_SHARED_LIBS to be turned OFF (default is OFF)" OFF)



if (NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
elseif(${CMAKE_CXX_STANDARD} LESS 17)
  message(FATAL_ERROR "phasar requires CMAKE_CXX_STANDARD >= 17")
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)



# Check if we build within the llvm source tree
if (DEFINED LLVM_MAIN_SRC_DIR)
  if (BUILD_SHARED_LIBS)
    message(FATAL_ERROR "currently phasar in tree need to be static")
  endif()
  set(CMAKE_PROJECT_NAME "phasar")
  set(PHASAR_BUILD_UNITTESTS OFF)

  set(CONANFILE "${PROJECT_SOURCE_DIR}/conanfile.in_llvm_tree.txt")

  # TODO code below was used before migration
  # remove after PHASAR_IN_TREE is successfuly tested

  # export given target "nlohmann_json_schema_validator" which is not built by this project.
  #set_property(GLOBAL APPEND PROPERTY LLVM_EXPORTS nlohmann_json_schema_validator)

  # if(NOT CLANG_INCLUDE_DIR)
  #   set(CLANG_INCLUDE_DIR ${LLVM_MAIN_SRC_DIR}/../clang/include )
  #   cmake_path(ABSOLUTE_PATH CLANG_INCLUDE_DIR NORMALIZE)
  # endif()
  # set(CLANG_INCLUDE_DIR ${LLVM_MAIN_SRC_DIR}/../clang/include )
  # # Specify TableGen output dir for things like DiagnosticCommonKinds.inc,
  # # DiagnosticDriverKinds.inc (required for reporting diagnostics)
  # set(CLANG_TABLEGEN_OUTPUT_DIR ${CMAKE_BINARY_DIR}/tools/clang/include)
  # include_directories(SYSTEM ${CLANG_TABLEGEN_OUTPUT_DIR})
  # Phasar needs clang headers, specificaly some that are generated by clangs table-gen
  # TODO: migrate this to cmake property reading! Why not simply link against the correct target?
  #message(FATAL_ERROR "> PHASAR_IN_TREE debug:\n clang include: ${CLANG_INCLUDE_DIR}\ncurrent source: ${CMAKE_CURRENT_SOURCE_DIR}\nproject-source: ${PROJECT_SOURCE_DIR}\nproject binary: ${PROJECT_BINARY_DIR}\ncmake-source: ${CMAKE_SOURCE_DIR}")
  
  # should actually be resolved if linked to it, for testing uncommented
  message(WARNING "For testing not explicitly added includes: ${CLANG_INCLUDE_DIR} ${PROJECT_BINARY_DIR}/tools/clang/include")
  # include_directories(
  #   ${CLANG_INCLUDE_DIR}
  #   ${PHASAR_SRC_DIR}/../clang/include # is identical to ${CLANG_INCLUDE_DIR}
  #   ${PROJECT_BINARY_DIR}/tools/clang/include
  # )

  # TODO: Get all lib targets
  # install(TARGETS ${name}
  #     EXPORT LLVMExports
  #     LIBRARY DESTINATION lib
  #     ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX})
endif()


# merged PHASAR_BUILD_OPENSSL_TS_UNITTESTS / PHASAR_BUILD_IR
option(PHASAR_BUILD_UNITTESTS "Build all tests and IR files (default is ON)" ON)
set(OPTION_TESTS_DISABLED)
set(OPTION_DOXYGEN_DISABLED)
if (NOT PHASAR_BUILD_UNITTESTS)
  set(OPTION_TESTS_DISABLED "SKIP_SUBDIRECTORIES")
  set(OPTION_DOXYGEN_DISABLED "SKIP_DOXYGEN")
endif()



option(PHASAR_ENABLE_CLANG_TIDY_DURING_BUILD "Run clang-tidy during build (default is OFF)" OFF) # should be fine
if (PHASAR_ENABLE_CLANG_TIDY_DURING_BUILD)
  message(STATUS "Enabled clang-tidy during build")
  set(CMAKE_CXX_CLANG_TIDY
    clang-tidy;
    -header-filter=phasar/.*h$;
    # -warnings-as-errors=*;
  )
endif ()



set(DOXYGEN_PROJECT_BRIEF "Phasar a LLVM-based Static Analysis Framework")
set(DOXYGEN_PROJECT_LOGO "${PROJECT_SOURCE_DIR}/img/Logo_RGB/Phasar_Logo.png")
set(DOXYGEN_ABBREVIATE_BRIEF "")
set(DOXYGEN_USE_MDFILE_AS_MAINPAGE "${PROJECT_SOURCE_DIR}/README.md")
# set(DOXYGEN_OPTIMIZE_OUTPUT_FOR_C YES) # according to doc if ONLY C files are used
set(DOXYGEN_EXTENSION_MAPPING "cu=C++ cuh=C++")
set(DOXYGEN_HTML_TIMESTAMP "YES")
# set(DOXYGEN_USE_MATHJAX "YES") # needed by option below
# set(DOXYGEN_MATHJAX_RELPATH "https://cdn.jsdelivr.net/npm/mathjax@3") # part of original phasar doxygen but not activated
set(DOXYGEN_HAVE_DOT "YES") # TODO graphviz needs to be there !?
set(DOXYGEN_DOT_MULTI_TARGETS "YES")
set(DOXYGEN_EXCLUDE_PATTERNS "*/llvm_test_code/*")




# TODO Basically only works if Phasars public API doesn't expose anything at all which is using the dependency, so a user would need to add the dependency on their own
# if private you have to manually handle include / compile
option(PHASAR_DEBUG_LIBDEPS "Debug internal library dependencies (private linkage)" OFF)
if (PHASAR_DEBUG_LIBDEPS)
  message(FATAL_ERROR "PHASAR_DEBUG_LIBDEPS isn't migrated, sorry.")
endif()




option(PHASAR_ENABLE_WARNINGS "Enable warnings" ON)
if (PHASAR_ENABLE_WARNINGS)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-variable -Wno-unused-parameter -Wno-return-type-c-linkage ")
endif()




option(PHASAR_ENABLE_PIC "Build Position-Independed Code" ON)
if (PHASAR_ENABLE_PIC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
endif()



if (NOT PHASAR_ENABLE_PAMM)
  set(PHASAR_ENABLE_PAMM "Off" CACHE STRING "Enable the performance measurement mechanism ('Off', 'Core' or 'Full', default is 'Off')" FORCE)
  set_property(CACHE PHASAR_ENABLE_PAMM PROPERTY STRINGS "Off" "Core" "Full")
endif()
if(PHASAR_BUILD_UNITTESTS)
  message("PAMM metric severity level: Off (due to unittests)")
elseif(PHASAR_ENABLE_PAMM STREQUAL "Core")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPAMM_CORE")
  message("PAMM metric severity level: Core")
elseif(PHASAR_ENABLE_PAMM STREQUAL "Full")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPAMM_FULL")
  message("PAMM metric severity level: Full")
else()
  message("PAMM metric severity level: Off")
endif()



option(PHASAR_ENABLE_DYNAMIC_LOG "Makes it possible to switch the logger on and off at runtime (default is ON)" ON)
if (PHASAR_ENABLE_DYNAMIC_LOG)
  message(STATUS "Dynamic log enabled")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDYNAMIC_LOG")
else()
  message(STATUS "Dynamic log disabled")
endif()



if (LLVM_ENABLE_LIBCXX)
  set(PHASAR_STD_FILESYSTEM c++fs)
else()
  set(PHASAR_STD_FILESYSTEM stdc++fs)
endif()




# TODO migrate install
# executables
# install (TARGETS ${name}
#     RUNTIME DESTINATION bin
#   )
# libraries
# if(PHASAR_IN_TREE)
# install(TARGETS ${name}
# EXPORT LLVMExports
# LIBRARY DESTINATION lib
# ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX})
# else()
# install(TARGETS ${name}
# EXPORT phasarTargets
# LIBRARY DESTINATION ${PHASAR_INSTALL_LIBDIR}
# ARCHIVE DESTINATION ${PHASAR_INSTALL_LIBDIR})
# install(TARGETS ${name}
# EXPORT ${name}-targets
# COMPONENT ${component_name}
# DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/phasar
# LIBRARY DESTINATION ${PHASAR_INSTALL_LIBDIR}
# ARCHIVE DESTINATION ${PHASAR_INSTALL_LIBDIR})
# install(EXPORT ${name}-targets
# FILE ${name}-targets.cmake
# NAMESPACE phasar::
# DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/phasar
# COMPONENT ${component_name})
# install(FILES ${name}-config.cmake
# DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/phasar)
# endif()
