set(PHASAR_VERSION 1.0.0)

@PACKAGE_INIT@
set_and_check(PHASAR_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
set_and_check(PHASAR_LIBRARY_DIR "@PACKAGE_LIBRARY_INSTALL_DIR@")

include (CMakeFindDependencyMacro)
find_dependency(nlohmann_json)
find_dependency(nlohmann_json_schema_validator)

find_package(Boost 1.65.1 COMPONENTS graph REQUIRED)
find_package(LLVM 14 REQUIRED CONFIG)

set(PHASAR_USE_LLVM_FAT_LIB @USE_LLVM_FAT_LIB@)
set(PHASAR_BUILD_DYNLIB @PHASAR_BUILD_DYNLIB@)

set(PHASAR_COMPONENTS
  utils
  passes
  config
  db
  pointer
  controlflow

  llvm_utils
  llvm_db
  llvm_pointer
  llvm_typehierarchy
  llvm_controlflow

  taintconfig
  mono
  llvm
  llvm_ifdside
  analysis_strategy
  controller
)

list(REMOVE_DUPLICATES phasar_FIND_COMPONENTS)

set(PHASAR_NEEDED_LIBS)

include("${CMAKE_CURRENT_LIST_DIR}/PhasarExports.cmake")

foreach(component ${phasar_FIND_COMPONENTS})
  if(NOT ${component} IN_LIST PHASAR_COMPONENTS)
    set(phasar_FOUND false)
    set(phasar_NOT_FOUND_MESSAGE "Unsupported component: ${component}. Valid components are: ${PHASAR_COMPONENTS}")
  endif()

  list(APPEND PHASAR_NEEDED_LIBS phasar::${component})
endforeach()

if (phasar_FOUND)
  foreach(component ${phasar_FIND_COMPONENTS})
    # For backwards compatibility -- will be removed with next release
    add_library(phasar::phasar_${component} ALIAS phasar::${component})
  endforeach()

  if (NOT phasar_FIND_COMPONENTS)
    list(APPEND PHASAR_NEEDED_LIBS phasar::phasar)
    # Default target
    add_library(phasar ALIAS phasar::phasar)
  endif()

  function(phasar_config executable)
    target_link_libraries(${executable}
      PUBLIC
        ${PHASAR_NEEDED_LIBS}
    )
  endfunction()
endif()
